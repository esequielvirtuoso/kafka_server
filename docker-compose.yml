version: '3.6'
networks:
  my-network-name:
    name: ${NETWORK_NAME}
    driver: bridge
services:
  zookeeper-1:
    container_name: ${ZOOKEEEPER_SERVICE_NAME_FIRST}
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - my-network-name
  zookeeper-2:
    container_name: ${ZOOKEEEPER_SERVICE_NAME_SECOND}
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 32181:2181
    networks:
      - my-network-name

  kafka-1:
    container_name: ${KAFKA_SERVICE_NAME_FIRST}
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper-1
      - zookeeper-2
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my-network-name
  init_kafka_1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka-1
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka-1:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka-1:29092 --create --if-not-exists --topic topic_test --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka-1:29092 --list

      echo -e 'Creating kafka consumer groups'
      kafka-console-consumer.sh --topic topic_test --bootstrap-server kafka-1:29092 --group consumer_group_test
      "
    networks:
      - my-network-name

  kafka-2:
    container_name: ${KAFKA_SERVICE_NAME_SECOND}
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper-1
      - zookeeper-2
    ports:
      - 39092:39092
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my-network-name
  init_kafka_2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka-2
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka-2:39092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka-2:39092 --create --if-not-exists --topic topic_test --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka-2:39092 --list

      echo -e 'Creating kafka consumer groups'
      kafka-console-consumer.sh --topic topic_test --bootstrap-server kafka-2:39092 --group consumer_group_test
      "
    networks:
      - my-network-name
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    depends_on:
      - kafka-1
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka-1:9092
    networks:
      - my-network-name